declare const components: {
    Checkbox: {
        baseStyle: (props: any) => {
            control: {
                _checked: {
                    bg: any;
                    borderColor: any;
                    color: any;
                    _hover: {
                        bg: any;
                        borderColor: any;
                    };
                    _disabled: {
                        borderColor: any;
                        bg: any;
                        color: any;
                    };
                };
            };
        };
    };
    Radio: {
        baseStyle: (props: any) => {
            control: {
                _checked: {
                    bg: any;
                    borderColor: any;
                    color: any;
                    _hover: {
                        bg: any;
                        borderColor: any;
                    };
                    _disabled: {
                        borderColor: any;
                        bg: any;
                        color: any;
                    };
                };
            };
        };
    };
    Link: {
        baseStyle: {
            _active: {
                boxShadow: string;
            };
        };
    };
    Accordion: {
        baseStyle: {
            container: {
                borderTopWidth: string;
                borderColor: string;
                _first: {
                    borderTopWidth: string;
                };
                _last: {
                    borderBottomWidth: string;
                };
            };
        };
    };
    Input: {
        parts: string[];
        baseStyle: {
            field: {};
        };
        sizes: {
            md: {
                field: {
                    px: number;
                    h: number;
                };
            };
            lg: {
                field: {
                    px: number;
                    h: number;
                };
            };
            xl: {
                field: {
                    px: number;
                    h: number;
                    borderRadius: string;
                };
            };
        };
        variants: {
            unstyled: {
                field: {
                    boxShadow: string;
                };
            };
            outline: {
                field: {
                    outline: string;
                    borderColor: string;
                    boxShadow: string;
                    _hover: {
                        borderColor: string;
                    };
                    _focus: {
                        zIndex: number;
                        borderColor: string;
                        boxShadow: string;
                    };
                };
            };
        };
        defaultProps: {
            h: number;
        };
    };
    Select: {
        parts: string[];
        baseStyle: (props: Record<string, any>) => {
            field: {
                boxShadow: any;
                border: string;
            };
        };
        sizes: {
            md: {
                field: {
                    px: number;
                    h: number;
                };
            };
            lg: {
                field: {
                    px: number;
                    h: number;
                };
            };
            xl: {
                field: {
                    px: number;
                    h: number;
                };
            };
        };
        variants: {};
        defaultProps: {};
    };
    Textarea: {
        baseStyle: (props: any) => {
            boxShadow: any;
            border: string;
        };
        variants: {
            outline: {
                outline: string;
                borderColor: string;
                boxShadow: string;
                _hover: {
                    borderColor: string;
                };
                _focus: {
                    zIndex: number;
                    borderColor: string;
                    boxShadow: string;
                };
            };
        };
    };
    Menu: {
        baseStyle: (props: Record<string, any>) => {
            list: {
                p: number;
                borderWidth: string;
                overflow: string;
                boxShadow: any;
            };
        };
        sizes: {};
        variants: {};
        defaultProps: {};
    };
    PinInput: {
        baseStyle: {
            boxShadow: string;
            _hover: {
                borderColor: string;
            };
            _focus: {
                zIndex: number;
                borderColor: string;
                boxShadow: string;
            };
        };
        sizes: {};
    };
    Tag: {
        baseStyle: {};
        sizes: {};
        defaultProps: {};
    };
    Button: {
        baseStyle: {};
        sizes: {
            md: {
                px: number;
                h: number;
            };
            lg: {
                px: number;
                h: number;
            };
            xl: {
                px: number;
                h: number;
                fontSize: string;
            };
        };
        variants: {
            solid: (props: {
                [x: string]: any;
            }) => {
                bg: any;
                _hover: {
                    bg: any;
                    _disabled: {
                        bg: any;
                    };
                };
                _active: {
                    bg: any;
                };
                color?: undefined;
            } | {
                bg: any;
                color: any;
                _hover: {
                    bg: any;
                    _disabled: {
                        bg: any;
                    };
                };
                _active: {
                    bg: any;
                };
            };
            gradient: ({ colorScheme, colorMode }: {
                colorScheme?: string | undefined;
                colorMode: any;
            }) => {
                bgColor: string;
                boxShdadow: any;
                bgGradient: string;
                color: string;
            };
        };
        defaultProps: {};
    };
    Tabs: {
        variants: {
            'enclosed-colored': (props: any) => {
                tablist: {
                    borderWidth: any;
                    borderColor: any;
                    overflow: string;
                    bgColor: any;
                    p: number;
                    borderRadius: string;
                };
                tab: {
                    borderWidth: string;
                    borderRightWidth: string;
                    transition: string;
                    bgColor: string;
                    _selected: {
                        bgColor: string;
                        color: string;
                        borderRadius: string;
                    };
                    _first: {
                        borderStartRadius: string;
                    };
                    _last: {
                        borderEndRadius: string;
                        borderRightWidth: string;
                    };
                };
            };
            line: (props: any) => {
                tablist: {
                    bg: any;
                    borderColor: string;
                    borderBottom: string;
                    overflow: string;
                    shadow: any;
                };
                tab: {
                    [x: string]: string | {
                        color: any;
                        borderRightColor: any;
                        '&::before': {
                            opacity: number;
                            bottom: string;
                            bg: any;
                        };
                        bg?: undefined;
                        opacity?: undefined;
                        cursor?: undefined;
                    } | {
                        bg: any;
                        color?: undefined;
                        borderRightColor?: undefined;
                        '&::before'?: undefined;
                        opacity?: undefined;
                        cursor?: undefined;
                    } | {
                        opacity: number;
                        cursor: string;
                        color?: undefined;
                        borderRightColor?: undefined;
                        '&::before'?: undefined;
                        bg?: undefined;
                    };
                    pos: string;
                    borderBottom: string;
                    overflow: string;
                    _selected: {
                        color: any;
                        borderRightColor: any;
                        '&::before': {
                            opacity: number;
                            bottom: string;
                            bg: any;
                        };
                    };
                    _active: {
                        bg: any;
                    };
                    _disabled: {
                        opacity: number;
                        cursor: string;
                    };
                };
            };
        };
    };
    Drawer: {
        baseStyle: {
            dialog: {};
        };
    };
};
export default components;
