import { extendTheme } from '@chakra-ui/react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function mode(light, dark) {
  return props => props.colorMode === "dark" ? dark : light;
}

var variantSolid = function (props) {
    var c = props.colorScheme;
    if (c === 'gray') {
        var bg_1 = mode('gray.100', 'whiteAlpha.200')(props);
        return {
            bg: bg_1,
            _hover: {
                bg: mode('gray.200', 'whiteAlpha.300')(props),
                _disabled: {
                    bg: bg_1,
                },
            },
            _active: { bg: mode('gray.300', 'whiteAlpha.400')(props) },
        };
    }
    var bg = c + ".500" , color = 'white' , hoverBg = c + ".600" , activeBg = c + ".700" ;
    var background = mode(bg, c + ".400")(props);
    return {
        bg: background,
        color: mode(color, 'gray.800')(props),
        _hover: {
            bg: mode(hoverBg, c + ".300")(props),
            _disabled: {
                bg: background,
            },
        },
        _active: { bg: mode(activeBg, c + ".400")(props) },
    };
};

var components = {
    // CHAKRA  components
    Checkbox: {
        baseStyle: function (props) { return ({
            control: {
                _checked: {
                    bg: mode('primary.500', 'primary.200')(props),
                    borderColor: mode('primary.500', 'primary.200')(props),
                    color: mode('white', 'gray.900')(props),
                    _hover: {
                        bg: mode('v.600', 'primary.300')(props),
                        borderColor: mode('primary.600', 'primary.300')(props),
                    },
                    _disabled: {
                        borderColor: mode('gray.200', 'transparent')(props),
                        bg: mode('gray.200', 'whiteAlpha.300')(props),
                        color: mode('gray.500', 'whiteAlpha.500')(props),
                    },
                },
            },
        }); },
    },
    Radio: {
        baseStyle: function (props) { return ({
            control: {
                _checked: {
                    bg: mode('primary.500', 'primary.200')(props),
                    borderColor: mode('primary.500', 'primary.200')(props),
                    color: mode('white', 'gray.900')(props),
                    _hover: {
                        bg: mode('v.600', 'primary.300')(props),
                        borderColor: mode('primary.600', 'primary.300')(props),
                    },
                    _disabled: {
                        borderColor: mode('gray.200', 'transparent')(props),
                        bg: mode('gray.200', 'whiteAlpha.300')(props),
                        color: mode('gray.500', 'whiteAlpha.500')(props),
                    },
                },
            },
        }); },
    },
    Link: {
        baseStyle: {
            _active: {
                boxShadow: 'none',
            },
        },
    },
    Accordion: {
        baseStyle: {
            container: {
                borderTopWidth: '1px',
                borderColor: 'inherit',
                _first: {
                    borderTopWidth: '0px',
                },
                _last: {
                    borderBottomWidth: '0px',
                },
            },
        },
    },
    Input: {
        parts: ['field', 'addon'],
        baseStyle: {
            field: {},
        },
        // Styles for the size variations
        sizes: {
            md: {
                field: {
                    px: 3,
                    h: 12,
                },
            },
            lg: {
                field: {
                    px: 4,
                    h: 14,
                },
            },
            xl: {
                field: {
                    px: 6,
                    h: 16,
                    borderRadius: 'md',
                },
            },
        },
        variants: {
            unstyled: {
                field: {
                    boxShadow: 'none',
                },
            },
            outline: {
                field: {
                    outline: 'rgba(125, 125, 125, 0.3)',
                    borderColor: 'rgba(125, 125, 125, 0.3)',
                    boxShadow: 'surface',
                    _hover: {
                        borderColor: 'rgba(125, 125, 125, 0.45)',
                    },
                    _focus: {
                        zIndex: 1,
                        borderColor: 'rgba(125, 125, 125, 0.3)',
                        boxShadow: 'outline',
                    },
                },
            },
        },
        defaultProps: {
            h: 14,
        },
    },
    Select: {
        parts: ['field', 'addon'],
        baseStyle: function (props) { return ({
            field: {
                boxShadow: mode('surface', 'surfaceDark')(props),
                border: 'none',
            },
        }); },
        // Styles for the size variations
        sizes: {
            md: {
                field: {
                    px: 4,
                    h: 12,
                },
            },
            lg: {
                field: {
                    px: 4,
                    h: 14,
                },
            },
            xl: {
                field: {
                    px: 6,
                    h: 16,
                },
            },
        },
        variants: {},
        defaultProps: {},
    },
    Textarea: {
        baseStyle: function (props) { return ({
            boxShadow: mode('surface', 'surfaceDark')(props),
            border: 'none',
        }); },
        variants: {
            outline: {
                outline: 'rgba(125, 125, 125, 0.3)',
                borderColor: 'rgba(125, 125, 125, 0.3)',
                boxShadow: 'surface',
                _hover: {
                    borderColor: 'rgba(125, 125, 125, 0.45)',
                },
                _focus: {
                    zIndex: 1,
                    borderColor: 'rgba(125, 125, 125, 0.3)',
                    boxShadow: 'outline',
                },
            },
        },
    },
    Menu: {
        baseStyle: function (props) { return ({
            list: {
                p: 1,
                borderWidth: '0px',
                overflow: 'visible',
                boxShadow: mode('surface', 'surfaceDark')(props),
            },
        }); },
        // Styles for the size variations
        sizes: {},
        variants: {},
        defaultProps: {},
    },
    PinInput: {
        baseStyle: {
            boxShadow: 'surface',
            _hover: {
                borderColor: 'rgba(125, 125, 125, 0.45)',
            },
            _focus: {
                zIndex: 1,
                borderColor: 'rgba(125, 125, 125, 0.3)',
                boxShadow: 'outline !important',
            },
        },
        sizes: {},
    },
    Tag: {
        baseStyle: {},
        sizes: {},
        defaultProps: {},
    },
    Button: {
        baseStyle: {},
        // Styles for the size variations
        sizes: {
            md: {
                px: 4,
                h: 12,
            },
            lg: {
                px: 6,
                h: 14,
            },
            xl: {
                px: 6,
                h: 16,
                fontSize: 'xl',
            },
        },
        // Styles for the visual style variations
        variants: {
            solid: variantSolid,
            gradient: function (_a) {
                var _b = _a.colorScheme, colorScheme = _b === void 0 ? 'gray' : _b, colorMode = _a.colorMode;
                return ({
                    bgColor: colorScheme + ".600",
                    boxShdadow: mode('surface', 'surfaceDark')({ colorMode: colorMode }),
                    bgGradient: "linear(25deg, " + colorScheme + ".500, " + colorScheme + ".400)",
                    color: 'white',
                });
            },
        },
        // The default `size` or `variant` values
        defaultProps: {},
    },
    Tabs: {
        variants: {
            'enclosed-colored': function (props) { return ({
                tablist: {
                    borderWidth: mode('1px', '1px')(props),
                    borderColor: mode('white', 'gray.800')(props),
                    overflow: 'visible',
                    bgColor: mode('transparent', 'transparent')(props),
                    p: 1,
                    borderRadius: 'md',
                },
                tab: {
                    borderWidth: '0',
                    borderRightWidth: '1px',
                    transition: 'all 0.25s',
                    bgColor: 'transparent',
                    _selected: {
                        bgColor: 'primary.500',
                        color: 'white',
                        borderRadius: 'md',
                    },
                    _first: {
                        borderStartRadius: 'md',
                    },
                    _last: {
                        borderEndRadius: 'md',
                        borderRightWidth: '0px',
                    },
                },
            }); },
            line: function (props) {
                var _a;
                var c = props.colorScheme, orientation = props.orientation;
                var isVertical = orientation === 'vertical';
                var marginProp = isVertical ? 'marginStart' : 'marginBottom';
                return {
                    tablist: {
                        bg: mode('white', 'gray.800')(props),
                        borderColor: 'inherit',
                        borderBottom: '0',
                        overflow: 'visible',
                        shadow: mode('surface', 'surfaceDark')(props),
                    },
                    tab: (_a = {
                            pos: 'relative',
                            borderBottom: 'none',
                            overflow: 'visible'
                        },
                        _a[marginProp] = '-1px',
                        _a._selected = {
                            color: mode(c + ".600", c + ".300")(props),
                            borderRightColor: mode('gray.100', 'whiteAlpha.400')(props),
                            '&::before': {
                                opacity: 1,
                                bottom: '-1px',
                                bg: mode('primary.500', 'primary.500')(props),
                            },
                        },
                        _a._active = {
                            bg: mode('gray.200', 'whiteAlpha.300')(props),
                        },
                        _a._disabled = {
                            opacity: 0.4,
                            cursor: 'not-allowed',
                        },
                        _a),
                };
            },
        },
    },
    Drawer: {
        baseStyle: {
            dialog: {
            //  m: { base: 0, md: 2 },
            //    borderRadius: { base: 0, md: 'lg' },
            },
        },
    },
};

var config = {
    useSystemColorMode: false,
};

var fonts = {
    body: 'Sora, -apple-system, system-ui, sans-serif',
    // body: 'Zen Tokyo Zoo',
    heading: 'Sora, -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
};

var colors = {
    primary: {
        50: '#FBE5FF',
        100: '#F3D4FF',
        200: '#D6BEFB',
        300: '#BB9CF5',
        400: '#A280EB',
        500: '#7F58DE',
        600: '#6140BE',
        700: '#472C9F',
        800: '#301C80',
        900: '#20106A',
    },
    secondary: {
        50: '#EAFDED',
        100: '#DCFBE7',
        200: '#BBF8D6',
        300: '#94ECC4',
        400: '#75D9B5',
        500: '#4AC1A2',
        600: '#36A593',
        700: '#258A84',
        800: '#176D6F',
        900: '#0E525C',
    },
    purple: {
        50: '#FBE5FF',
        100: '#F3D4FF',
        200: '#D6BEFB',
        300: '#BB9CF5',
        400: '#A280EB',
        500: '#7F58DE',
        600: '#6140BE',
        700: '#472C9F',
        800: '#301C80',
        900: '#20106A',
    },
    green: {
        50: '#EAFDED',
        100: '#DCFBE7',
        200: '#BBF8D6',
        300: '#94ECC4',
        400: '#75D9B5',
        500: '#4AC1A2',
        600: '#36A593',
        700: '#258A84',
        800: '#176D6F',
        900: '#0E525C',
    },
    gray: {
        50: '#F7FAFC',
        100: '#EDF2F7',
        200: '#E2E8F0',
        300: '#CBD5E0',
        400: '#A0AEC0',
        500: '#718096',
        600: '#4A5568',
        700: '#252b35',
        800: '#1A202C',
        900: '#171923',
    },
};

var styles = {
    global: function (props) { return ({
        body: {
            // fontFamily: 'Sora',
            color: mode('gray.700', 'whiteAlpha.900')(props),
            overflowX: 'hidden',
        },
    }); },
};

var sizes = {
    '3xs': '14rem',
    '2xs': '16rem',
    xs: '20rem',
    sm: '24rem',
    md: '28rem',
    lg: '32rem',
    xl: '36rem',
    '2xl': '42rem',
    '3xl': '48rem',
    '4xl': '56rem',
    '5xl': '64rem',
    '6xl': '72rem',
    '7xl': '80rem',
    '8xl': '90rem',
    container: {
        sm: '640px',
        md: '768px',
        lg: '1024px',
        xl: '1280px',
    },
};

var shadows = {
    surface: '0 0 0 1px rgba(63,63,68,0.05), 0 1px 35px 0 rgba(63,63,68,0.05)',
    surfaceDark: '0 0 0 1px rgba(195,195,195,0.045), 0 1px 35px 0 rgba(0,0,0,0.1)',
    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
    outline: '0 0 0 3px rgba(125, 125, 125, 0.3)',
    xs: '0 0 0 1px rgba(0, 0, 0, 0.05)',
    base: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
    lg: '0 6px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
    xl: '0 8px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
    '2xl': '0 15px 50px -12px rgba(0, 0, 0, 0.25)',
    inner: 'inset 0 2px 4px 0 rgba(0,0,0,0.06)',
    none: 'none',
};

var radii = {
    none: '0',
    sm: '0.125rem',
    base: '0.75rem',
    md: '6px',
    lg: '12px',
    xl: '18px',
    '2xl': '2.5rem',
    '3xl': '3.5rem',
    full: '9999px',
};

var customTheme = {
    config: config,
    styles: styles,
    fonts: fonts,
    colors: colors,
    sizes: sizes,
    shadows: shadows,
    radii: radii,
    components: components,
    lineHeights: {
        3: '.75rem',
        4: '1rem',
        5: '1.25rem',
        6: '1.5rem',
        7: '1.75rem',
        8: '2rem',
        9: '2.25rem',
        10: '2.5rem',
        normal: 'normal',
        none: '1',
        shorter: '1.25',
        short: '1.375',
        base: '1.5',
        tall: '1.625',
        taller: '2',
    },
};
var theme = extendTheme(__assign(__assign({}, customTheme), { config: __assign(__assign({}, customTheme.config), { cssVarPrefix: 'hypertheme' }) }));

export { theme };
//# sourceMappingURL=index.esm.js.map
