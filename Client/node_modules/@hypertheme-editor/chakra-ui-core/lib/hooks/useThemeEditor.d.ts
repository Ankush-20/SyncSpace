import { Theme as ChakraTheme } from '@chakra-ui/react';
import { Patch } from 'immer';
export declare type Theme = Partial<Omit<ChakraTheme, 'colors'>> & {
    colors?: Record<string, Record<number, string>>;
};
/**
 * Contains all the information necessary to manage the dynamic theme
 * @param currentTheme - The current theme actually visible
 * @param initialTheme - The initial theme filled at startup, used for reset
 * @param undoable - the list of patches containing past changes history
 * @param undone - the list of patches containing redos history
 */
export interface ThemeEditorState {
    currentTheme: Theme | undefined;
    initialTheme: Theme | undefined;
    undoable: {
        patches: Patch[];
        inversePatches: Patch[];
    }[];
    undone: {
        patches: Patch[];
        inversePatches: Patch[];
    }[];
}
/**
 * Recoil theme editor state atom
 */
export declare const themeEditorState: import("recoil").RecoilState<ThemeEditorState>;
export interface useThemeEditorReturn {
    /**
     * The returned object from useThemeEditor
     * @param theme - the current theme
     * @param initialTheme - the initial theme provided from Chakra
     * @param setTheme - set a new current theme: {@link useThemeEditorReturn.setTheme}
     * @param canUndo - a boolean indicating if there's any past history
     * @param undo - this function set the current theme to the last change
     * @param canRedo - this function set the current theme to the next change
     * @param redo - call this function to go back in the history
     */
    theme: Theme | undefined;
    initialTheme: Theme | undefined;
    /**
     * set the current theme
     * @param theme - the new theme that will be setted
     */
    setTheme: (theme: Theme) => void;
    canUndo: boolean;
    undo: () => void;
    canRedo: boolean;
    redo: () => void;
}
/**
 * An hook to manage the current ThemeEditorState
 *
 * @returns an object with the curent ThemeEditorState and history actions: {@link useThemeEditorReturn}
 */
export declare const useThemeEditor: () => useThemeEditorReturn;
