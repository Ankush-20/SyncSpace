{"ast":null,"code":"var _jsxFileName = \"/Users/ankushrandhawa/Downloads/full-stack-crm-main/Client/src/views/admin/task/task.js\",\n  _s = $RefreshSig$();\nimport { AddIcon } from '@chakra-ui/icons';\nimport { Button, Flex, useDisclosure } from '@chakra-ui/react';\nimport { useEffect, useState } from 'react';\nimport { getApi } from 'services/api';\nimport CheckTable from './components/CheckTable';\nimport AddTask from './components/addTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task = props => {\n  _s();\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const columns = [{\n    Header: \"#\",\n    accessor: \"_id\",\n    isSortable: false,\n    width: 5\n  }, {\n    Header: 'Title',\n    accessor: 'title'\n  }, {\n    Header: \"Related\",\n    accessor: \"category\"\n  }, {\n    Header: \"Assignment To\",\n    accessor: \"assignmentToName\"\n  }, {\n    Header: \"Start Date\",\n    accessor: \"start\"\n  }, {\n    Header: \"End Date\",\n    accessor: \"end\"\n  }];\n  const handleClick = () => {\n    onOpen();\n  };\n  const [data, setData] = useState([]);\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [isLoding, setIsLoding] = useState(false);\n  const fetchData = async () => {\n    setIsLoding(true);\n    let result = await getApi(user.role === 'admin' ? 'api/task/' : `api/task/?createBy=${user._id}`);\n    setData(result.data);\n    setIsLoding(false);\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: 'center',\n      justifyContent: \"right\",\n      flexWrap: 'wrap',\n      mb: 3,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => handleClick(),\n        leftIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 65\n        }, this),\n        variant: \"brand\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CheckTable, {\n      columnsData: columns,\n      fetchData: fetchData,\n      data: data,\n      isLoding: isLoding,\n      className: \"table-fix-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddTask, {\n      isOpen: isOpen,\n      fetchData: fetchData,\n      onClose: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(Task, \"ABm4p5H+yl+2gnuSqqZYt6qkXuw=\", false, function () {\n  return [useDisclosure];\n});\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["AddIcon","Button","Flex","useDisclosure","useEffect","useState","getApi","CheckTable","AddTask","jsxDEV","_jsxDEV","Task","props","_s","isOpen","onOpen","onClose","columns","Header","accessor","isSortable","width","handleClick","data","setData","user","JSON","parse","localStorage","getItem","isLoding","setIsLoding","fetchData","result","role","_id","children","alignItems","justifyContent","flexWrap","mb","onClick","leftIcon","fileName","_jsxFileName","lineNumber","columnNumber","variant","columnsData","className","_c","$RefreshReg$"],"sources":["/Users/ankushrandhawa/Downloads/full-stack-crm-main/Client/src/views/admin/task/task.js"],"sourcesContent":["import { AddIcon } from '@chakra-ui/icons'\nimport { Button, Flex, useDisclosure } from '@chakra-ui/react'\nimport { useEffect, useState } from 'react'\nimport { getApi } from 'services/api'\nimport CheckTable from './components/CheckTable'\nimport AddTask from './components/addTask'\n\nconst Task = (props) => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n\n    const columns = [\n        {\n            Header: \"#\",\n            accessor: \"_id\",\n            isSortable: false,\n            width: 5\n        },\n        { Header: 'Title', accessor: 'title' },\n        { Header: \"Related\", accessor: \"category\", },\n        { Header: \"Assignment To\", accessor: \"assignmentToName\", },\n        { Header: \"Start Date\", accessor: \"start\", },\n        { Header: \"End Date\", accessor: \"end\", },\n    ];\n\n    const handleClick = () => {\n        onOpen()\n    }\n\n    const [data, setData] = useState([])\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const [isLoding, setIsLoding] = useState(false)\n\n    const fetchData = async () => {\n        setIsLoding(true)\n        let result = await getApi(user.role === 'admin' ? 'api/task/' : `api/task/?createBy=${user._id}`);\n        setData(result.data);\n        setIsLoding(false)\n    }\n\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n\n    return (\n        <div>\n            <Flex alignItems={'center'} justifyContent={\"right\"} flexWrap={'wrap'} mb={3}>\n                <Button onClick={() => handleClick()} leftIcon={<AddIcon />} variant=\"brand\">Create Task</Button>\n            </Flex>\n            <CheckTable columnsData={columns} fetchData={fetchData} data={data} isLoding={isLoding} className='table-fix-container' />\n            <AddTask isOpen={isOpen} fetchData={fetchData} onClose={onClose} />\n        </div>\n    )\n}\n\nexport default Task\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}