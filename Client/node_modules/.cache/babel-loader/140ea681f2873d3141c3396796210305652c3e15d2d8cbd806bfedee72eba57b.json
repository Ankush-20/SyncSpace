{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\nvar React = require('react');\nvar downshift = require('downshift');\nvar matchSorter = _interopDefault(require('match-sorter'));\nvar Highlighter = _interopDefault(require('react-highlight-words'));\nvar useDeepCompareEffect = _interopDefault(require('react-use/lib/useDeepCompareEffect'));\nvar formControl = require('@chakra-ui/form-control');\nvar layout = require('@chakra-ui/layout');\nvar button = require('@chakra-ui/button');\nvar input = require('@chakra-ui/input');\nvar icons = require('@chakra-ui/icons');\nvar tag = require('@chakra-ui/tag');\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction defaultOptionFilterFunc(items, inputValue) {\n  return matchSorter(items, inputValue, {\n    keys: ['value', 'label']\n  });\n}\nfunction defaultCreateItemRenderer(value) {\n  return React.createElement(layout.Text, null, React.createElement(layout.Box, {\n    as: 'span'\n  }, \"Create\"), ' ', React.createElement(layout.Box, {\n    as: 'span',\n    bg: 'yellow.300',\n    fontWeight: 'bold'\n  }, \"\\\"\", value, \"\\\"\"));\n}\nvar CUIAutoComplete = function CUIAutoComplete(props) {\n  var items = props.items,\n    _props$optionFilterFu = props.optionFilterFunc,\n    optionFilterFunc = _props$optionFilterFu === void 0 ? defaultOptionFilterFunc : _props$optionFilterFu,\n    itemRenderer = props.itemRenderer,\n    _props$highlightItemB = props.highlightItemBg,\n    highlightItemBg = _props$highlightItemB === void 0 ? 'gray.100' : _props$highlightItemB,\n    placeholder = props.placeholder,\n    label = props.label,\n    listStyleProps = props.listStyleProps,\n    labelStyleProps = props.labelStyleProps,\n    inputStyleProps = props.inputStyleProps,\n    toggleButtonStyleProps = props.toggleButtonStyleProps,\n    tagStyleProps = props.tagStyleProps,\n    selectedIconProps = props.selectedIconProps,\n    listItemStyleProps = props.listItemStyleProps,\n    onCreateItem = props.onCreateItem,\n    icon = props.icon,\n    _props$hideToggleButt = props.hideToggleButton,\n    hideToggleButton = _props$hideToggleButt === void 0 ? false : _props$hideToggleButt,\n    _props$disableCreateI = props.disableCreateItem,\n    disableCreateItem = _props$disableCreateI === void 0 ? false : _props$disableCreateI,\n    _props$createItemRend = props.createItemRenderer,\n    createItemRenderer = _props$createItemRend === void 0 ? defaultCreateItemRenderer : _props$createItemRend,\n    renderCustomInput = props.renderCustomInput,\n    downshiftProps = _objectWithoutPropertiesLoose(props, [\"items\", \"optionFilterFunc\", \"itemRenderer\", \"highlightItemBg\", \"placeholder\", \"label\", \"listStyleProps\", \"labelStyleProps\", \"inputStyleProps\", \"toggleButtonStyleProps\", \"tagStyleProps\", \"selectedIconProps\", \"listItemStyleProps\", \"onCreateItem\", \"icon\", \"hideToggleButton\", \"disableCreateItem\", \"createItemRenderer\", \"renderCustomInput\"]);\n  /* States */\n\n  var _React$useState = React.useState(false),\n    isCreating = _React$useState[0],\n    setIsCreating = _React$useState[1];\n  var _React$useState2 = React.useState(''),\n    inputValue = _React$useState2[0],\n    setInputValue = _React$useState2[1];\n  var _React$useState3 = React.useState(items),\n    inputItems = _React$useState3[0],\n    setInputItems = _React$useState3[1];\n  /* Refs */\n\n  var disclosureRef = React.useRef(null);\n  /* Downshift Props */\n\n  var _useMultipleSelection = downshift.useMultipleSelection(downshiftProps),\n    getSelectedItemProps = _useMultipleSelection.getSelectedItemProps,\n    getDropdownProps = _useMultipleSelection.getDropdownProps,\n    addSelectedItem = _useMultipleSelection.addSelectedItem,\n    removeSelectedItem = _useMultipleSelection.removeSelectedItem,\n    selectedItems = _useMultipleSelection.selectedItems;\n  var selectedItemValues = selectedItems.map(function (item) {\n    return item.value;\n  });\n  var _useCombobox = downshift.useCombobox({\n      inputValue: inputValue,\n      selectedItem: undefined,\n      items: inputItems,\n      onInputValueChange: function onInputValueChange(_ref) {\n        var inputValue = _ref.inputValue,\n          selectedItem = _ref.selectedItem;\n        var filteredItems = optionFilterFunc(items, inputValue || '');\n        if (isCreating && filteredItems.length > 0) {\n          setIsCreating(false);\n        }\n        if (!selectedItem) {\n          setInputItems(filteredItems);\n        }\n      },\n      stateReducer: function stateReducer(state, actionAndChanges) {\n        var changes = actionAndChanges.changes,\n          type = actionAndChanges.type;\n        switch (type) {\n          case downshift.useCombobox.stateChangeTypes.InputBlur:\n            return _extends({}, changes, {\n              isOpen: false\n            });\n          case downshift.useCombobox.stateChangeTypes.InputKeyDownEnter:\n          case downshift.useCombobox.stateChangeTypes.ItemClick:\n            return _extends({}, changes, {\n              highlightedIndex: state.highlightedIndex,\n              inputValue: inputValue,\n              isOpen: true\n            });\n          case downshift.useCombobox.stateChangeTypes.FunctionSelectItem:\n            return _extends({}, changes, {\n              inputValue: inputValue\n            });\n          default:\n            return changes;\n        }\n      },\n      // @ts-ignore\n      onStateChange: function onStateChange(_ref2) {\n        var inputValue = _ref2.inputValue,\n          type = _ref2.type,\n          selectedItem = _ref2.selectedItem;\n        switch (type) {\n          case downshift.useCombobox.stateChangeTypes.InputChange:\n            setInputValue(inputValue || '');\n            break;\n          case downshift.useCombobox.stateChangeTypes.InputKeyDownEnter:\n          case downshift.useCombobox.stateChangeTypes.ItemClick:\n            if (selectedItem) {\n              if (selectedItemValues.includes(selectedItem.value)) {\n                removeSelectedItem(selectedItem);\n              } else {\n                if (onCreateItem && isCreating) {\n                  onCreateItem(selectedItem);\n                  setIsCreating(false);\n                  setInputItems(items);\n                  setInputValue('');\n                } else {\n                  addSelectedItem(selectedItem);\n                }\n              } // @ts-ignore\n\n              selectItem(null);\n            }\n            break;\n        }\n      }\n    }),\n    isOpen = _useCombobox.isOpen,\n    getToggleButtonProps = _useCombobox.getToggleButtonProps,\n    getLabelProps = _useCombobox.getLabelProps,\n    getMenuProps = _useCombobox.getMenuProps,\n    getInputProps = _useCombobox.getInputProps,\n    getComboboxProps = _useCombobox.getComboboxProps,\n    highlightedIndex = _useCombobox.highlightedIndex,\n    getItemProps = _useCombobox.getItemProps,\n    openMenu = _useCombobox.openMenu,\n    selectItem = _useCombobox.selectItem,\n    setHighlightedIndex = _useCombobox.setHighlightedIndex;\n  React.useEffect(function () {\n    if (inputItems.length === 0 && !disableCreateItem) {\n      setIsCreating(true); // @ts-ignore\n\n      setInputItems([{\n        label: \"\" + inputValue,\n        value: inputValue\n      }]);\n      setHighlightedIndex(0);\n    }\n  }, [inputItems, setIsCreating, setHighlightedIndex, inputValue, disableCreateItem]);\n  useDeepCompareEffect(function () {\n    setInputItems(items);\n  }, [items]);\n  /* Default Items Renderer */\n\n  function defaultItemRenderer(selected) {\n    return selected.label;\n  }\n  return React.createElement(layout.Stack, null, React.createElement(formControl.FormLabel, Object.assign({}, _extends({}, getLabelProps({}), labelStyleProps)), label), selectedItems && React.createElement(layout.Stack, {\n    spacing: 2,\n    isInline: true,\n    flexWrap: 'wrap'\n  }, selectedItems.map(function (selectedItem, index) {\n    return React.createElement(tag.Tag, Object.assign({\n      mb: 1\n    }, tagStyleProps, {\n      key: \"selected-item-\" + index\n    }, getSelectedItemProps({\n      selectedItem: selectedItem,\n      index: index\n    })), React.createElement(tag.TagLabel, null, selectedItem.label), React.createElement(tag.TagCloseButton, {\n      onClick: function onClick(e) {\n        e.stopPropagation();\n        removeSelectedItem(selectedItem);\n      },\n      \"aria-label\": 'Remove menu selection badge'\n    }));\n  })), React.createElement(layout.Stack, Object.assign({\n    isInline: true\n  }, getComboboxProps()), renderCustomInput ? renderCustomInput(_extends({}, inputStyleProps, getInputProps(getDropdownProps({\n    placeholder: placeholder,\n    onClick: isOpen ? function () {} : openMenu,\n    onFocus: isOpen ? function () {} : openMenu,\n    ref: disclosureRef\n  }))), _extends({}, toggleButtonStyleProps, getToggleButtonProps(), {\n    ariaLabel: 'toggle menu',\n    hideToggleButton: hideToggleButton\n  })) : React.createElement(React.Fragment, null, React.createElement(input.Input, Object.assign({}, inputStyleProps, getInputProps(getDropdownProps({\n    placeholder: placeholder,\n    onClick: isOpen ? function () {} : openMenu,\n    onFocus: isOpen ? function () {} : openMenu,\n    ref: disclosureRef\n  })))), !hideToggleButton && React.createElement(button.Button, Object.assign({}, toggleButtonStyleProps, getToggleButtonProps(), {\n    \"aria-label\": 'toggle menu'\n  }), React.createElement(icons.ArrowDownIcon, null)))), React.createElement(layout.Box, {\n    pb: 4,\n    mb: 4\n  }, React.createElement(layout.List, Object.assign({\n    bg: 'white',\n    borderRadius: '4px',\n    border: isOpen && '1px solid rgba(0,0,0,0.1)',\n    boxShadow: '6px 5px 8px rgba(0,50,30,0.02)'\n  }, listStyleProps, getMenuProps()), isOpen && inputItems.map(function (item, index) {\n    return React.createElement(layout.ListItem, Object.assign({\n      px: 2,\n      py: 1,\n      borderBottom: '1px solid rgba(0,0,0,0.01)'\n    }, listItemStyleProps, {\n      bg: highlightedIndex === index ? highlightItemBg : 'inherit',\n      key: \"\" + item.value + index\n    }, getItemProps({\n      item: item,\n      index: index\n    })), isCreating ? createItemRenderer(item.label) : React.createElement(layout.Box, {\n      display: 'inline-flex',\n      alignItems: 'center'\n    }, selectedItemValues.includes(item.value) && React.createElement(layout.ListIcon, Object.assign({\n      as: icon || icons.CheckCircleIcon,\n      color: 'green.500',\n      role: 'img',\n      display: 'inline',\n      \"aria-label\": 'Selected'\n    }, selectedIconProps)), itemRenderer ? itemRenderer(item) : React.createElement(Highlighter, {\n      autoEscape: true,\n      searchWords: [inputValue || ''],\n      textToHighlight: defaultItemRenderer(item)\n    })));\n  }))));\n};\nexports.CUIAutoComplete = CUIAutoComplete;","map":{"version":3,"names":["defaultOptionFilterFunc","items","inputValue","matchSorter","keys","defaultCreateItemRenderer","value","React","createElement","layout","Text","Box","as","bg","fontWeight","CUIAutoComplete","props","optionFilterFunc","_props$optionFilterFu","itemRenderer","highlightItemBg","_props$highlightItemB","placeholder","label","listStyleProps","labelStyleProps","inputStyleProps","toggleButtonStyleProps","tagStyleProps","selectedIconProps","listItemStyleProps","onCreateItem","icon","hideToggleButton","_props$hideToggleButt","disableCreateItem","_props$disableCreateI","createItemRenderer","_props$createItemRend","renderCustomInput","downshiftProps","_objectWithoutPropertiesLoose","useState","isCreating","_React$useState","setIsCreating","_React$useState2","setInputValue","inputItems","_React$useState3","setInputItems","disclosureRef","useRef","downshift","useMultipleSelection","getSelectedItemProps","_useMultipleSelection","getDropdownProps","addSelectedItem","removeSelectedItem","selectedItems","selectedItemValues","map","item","useCombobox","selectedItem","undefined","onInputValueChange","_ref","filteredItems","length","stateReducer","state","actionAndChanges","changes","type","stateChangeTypes","InputBlur","_extends","isOpen","InputKeyDownEnter","ItemClick","highlightedIndex","FunctionSelectItem","onStateChange","_ref2","InputChange","includes","selectItem","_useCombobox","getToggleButtonProps","getLabelProps","getMenuProps","getInputProps","getComboboxProps","getItemProps","openMenu","setHighlightedIndex","useEffect","useDeepCompareEffect","defaultItemRenderer","selected","Stack","formControl","FormLabel","Object","assign","spacing","isInline","flexWrap","index","tag","Tag","mb","key","TagLabel","TagCloseButton","onClick","e","stopPropagation","onFocus","ref","ariaLabel","Fragment","input","Input","button","Button","icons","ArrowDownIcon","pb","List","borderRadius","border","boxShadow","ListItem","px","py","borderBottom","display","alignItems","ListIcon","CheckCircleIcon","color","role","Highlighter","autoEscape","searchWords","textToHighlight"],"sources":["/Users/ankushrandhawa/Downloads/full-stack-crm-main/Client/node_modules/chakra-ui-autocomplete/src/index.tsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport * as React from 'react'\nimport {\n  useCombobox,\n  useMultipleSelection,\n  UseMultipleSelectionProps\n} from 'downshift'\nimport matchSorter from 'match-sorter'\nimport Highlighter from 'react-highlight-words'\nimport useDeepCompareEffect from 'react-use/lib/useDeepCompareEffect'\nimport { FormLabel, FormLabelProps } from '@chakra-ui/form-control'\nimport {\n  Text,\n  Stack,\n  Box,\n  BoxProps,\n  List,\n  ListItem,\n  ListIcon\n} from '@chakra-ui/layout'\nimport { Button, ButtonProps } from '@chakra-ui/button'\nimport { Input, InputProps } from '@chakra-ui/input'\nimport { IconProps, CheckCircleIcon, ArrowDownIcon } from '@chakra-ui/icons'\nimport { Tag, TagCloseButton, TagLabel, TagProps } from '@chakra-ui/tag'\nimport { ComponentWithAs } from '@chakra-ui/react'\n\nexport interface Item {\n  label: string\n  value: string\n}\n\nexport interface CUIAutoCompleteProps<T extends Item>\n  extends UseMultipleSelectionProps<T> {\n  items: T[]\n  placeholder: string\n  label: string\n  highlightItemBg?: string\n  onCreateItem?: (item: T) => void\n  optionFilterFunc?: (items: T[], inputValue: string) => T[]\n  itemRenderer?: (item: T) => string | JSX.Element\n  labelStyleProps?: FormLabelProps\n  inputStyleProps?: InputProps\n  toggleButtonStyleProps?: ButtonProps\n  tagStyleProps?: TagProps\n  listStyleProps?: BoxProps\n  listItemStyleProps?: BoxProps\n  emptyState?: (inputValue: string) => React.ReactNode\n  selectedIconProps?: Omit<IconProps, 'name'> & {\n    icon: IconProps['name'] | React.ComponentType\n  }\n  icon?: ComponentWithAs<'svg', IconProps>\n  hideToggleButton?: boolean\n  createItemRenderer?: (value: string) => string | JSX.Element\n  disableCreateItem?: boolean\n  renderCustomInput?: (inputProps: any, toggleButtonProps: any) => JSX.Element\n}\n\nfunction defaultOptionFilterFunc<T>(items: T[], inputValue: string) {\n  return matchSorter(items, inputValue, { keys: ['value', 'label'] })\n}\n\nfunction defaultCreateItemRenderer(value: string) {\n  return (\n    <Text>\n      <Box as='span'>Create</Box>{' '}\n      <Box as='span' bg='yellow.300' fontWeight='bold'>\n        \"{value}\"\n      </Box>\n    </Text>\n  )\n}\n\nexport const CUIAutoComplete = <T extends Item>(\n  props: CUIAutoCompleteProps<T>\n): React.ReactElement<CUIAutoCompleteProps<T>> => {\n  const {\n    items,\n    optionFilterFunc = defaultOptionFilterFunc,\n    itemRenderer,\n    highlightItemBg = 'gray.100',\n    placeholder,\n    label,\n    listStyleProps,\n    labelStyleProps,\n    inputStyleProps,\n    toggleButtonStyleProps,\n    tagStyleProps,\n    selectedIconProps,\n    listItemStyleProps,\n    onCreateItem,\n    icon,\n    hideToggleButton = false,\n    disableCreateItem = false,\n    createItemRenderer = defaultCreateItemRenderer,\n    renderCustomInput,\n    ...downshiftProps\n  } = props\n\n  /* States */\n  const [isCreating, setIsCreating] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState('')\n  const [inputItems, setInputItems] = React.useState<T[]>(items)\n\n  /* Refs */\n  const disclosureRef = React.useRef(null)\n\n  /* Downshift Props */\n  const {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    selectedItems\n  } = useMultipleSelection(downshiftProps)\n  const selectedItemValues = selectedItems.map((item) => item.value)\n\n  const {\n    isOpen,\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    highlightedIndex,\n    getItemProps,\n    openMenu,\n    selectItem,\n    setHighlightedIndex\n  } = useCombobox({\n    inputValue,\n    selectedItem: undefined,\n    items: inputItems,\n    onInputValueChange: ({ inputValue, selectedItem }) => {\n      const filteredItems = optionFilterFunc(items, inputValue || '')\n\n      if (isCreating && filteredItems.length > 0) {\n        setIsCreating(false)\n      }\n\n      if (!selectedItem) {\n        setInputItems(filteredItems)\n      }\n    },\n    stateReducer: (state, actionAndChanges) => {\n      const { changes, type } = actionAndChanges\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputBlur:\n          return {\n            ...changes,\n            isOpen: false\n          }\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          return {\n            ...changes,\n            highlightedIndex: state.highlightedIndex,\n            inputValue,\n            isOpen: true\n          }\n        case useCombobox.stateChangeTypes.FunctionSelectItem:\n          return {\n            ...changes,\n            inputValue\n          }\n        default:\n          return changes\n      }\n    },\n    // @ts-ignore\n    onStateChange: ({ inputValue, type, selectedItem }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputChange:\n          setInputValue(inputValue || '')\n          break\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          if (selectedItem) {\n            if (selectedItemValues.includes(selectedItem.value)) {\n              removeSelectedItem(selectedItem)\n            } else {\n              if (onCreateItem && isCreating) {\n                onCreateItem(selectedItem)\n                setIsCreating(false)\n                setInputItems(items)\n                setInputValue('')\n              } else {\n                addSelectedItem(selectedItem)\n              }\n            }\n\n            // @ts-ignore\n            selectItem(null)\n          }\n          break\n        default:\n          break\n      }\n    }\n  })\n\n  React.useEffect(() => {\n    if (inputItems.length === 0 && !disableCreateItem) {\n      setIsCreating(true)\n      // @ts-ignore\n      setInputItems([{ label: `${inputValue}`, value: inputValue }])\n      setHighlightedIndex(0)\n    }\n  }, [\n    inputItems,\n    setIsCreating,\n    setHighlightedIndex,\n    inputValue,\n    disableCreateItem\n  ])\n\n  useDeepCompareEffect(() => {\n    setInputItems(items)\n  }, [items])\n\n  /* Default Items Renderer */\n  function defaultItemRenderer<T extends Item>(selected: T) {\n    return selected.label\n  }\n\n  return (\n    <Stack>\n      <FormLabel {...{ ...getLabelProps({}), ...labelStyleProps }}>\n        {label}\n      </FormLabel>\n\n      {/* ---------Stack with Selected Menu Tags above the Input Box--------- */}\n      {selectedItems && (\n        <Stack spacing={2} isInline flexWrap='wrap'>\n          {selectedItems.map((selectedItem, index) => (\n            <Tag\n              mb={1}\n              {...tagStyleProps}\n              key={`selected-item-${index}`}\n              {...getSelectedItemProps({ selectedItem, index })}\n            >\n              <TagLabel>{selectedItem.label}</TagLabel>\n              <TagCloseButton\n                onClick={(e) => {\n                  e.stopPropagation()\n                  removeSelectedItem(selectedItem)\n                }}\n                aria-label='Remove menu selection badge'\n              />\n            </Tag>\n          ))}\n        </Stack>\n      )}\n      {/* ---------Stack with Selected Menu Tags above the Input Box--------- */}\n\n      {/* -----------Section that renders the input element ----------------- */}\n      <Stack isInline {...getComboboxProps()}>\n        {renderCustomInput ? (\n          renderCustomInput(\n            {\n              ...inputStyleProps,\n              ...getInputProps(\n                getDropdownProps({\n                  placeholder,\n                  onClick: isOpen ? () => {} : openMenu,\n                  onFocus: isOpen ? () => {} : openMenu,\n                  ref: disclosureRef\n                })\n              )\n            },\n            {\n              ...toggleButtonStyleProps,\n              ...getToggleButtonProps(),\n              ariaLabel: 'toggle menu',\n              hideToggleButton\n            }\n          )\n        ) : (\n          <>\n            <Input\n              {...inputStyleProps}\n              {...getInputProps(\n                getDropdownProps({\n                  placeholder,\n                  onClick: isOpen ? () => {} : openMenu,\n                  onFocus: isOpen ? () => {} : openMenu,\n                  ref: disclosureRef\n                })\n              )}\n            />\n            {!hideToggleButton && (\n              <Button\n                {...toggleButtonStyleProps}\n                {...getToggleButtonProps()}\n                aria-label='toggle menu'\n              >\n                <ArrowDownIcon />\n              </Button>\n            )}\n          </>\n        )}\n      </Stack>\n      {/* -----------Section that renders the input element ----------------- */}\n\n      {/* -----------Section that renders the Menu Lists Component ----------------- */}\n      <Box pb={4} mb={4}>\n        <List\n          bg='white'\n          borderRadius='4px'\n          border={isOpen && '1px solid rgba(0,0,0,0.1)'}\n          boxShadow='6px 5px 8px rgba(0,50,30,0.02)'\n          {...listStyleProps}\n          {...getMenuProps()}\n        >\n          {isOpen &&\n            inputItems.map((item, index) => (\n              <ListItem\n                px={2}\n                py={1}\n                borderBottom='1px solid rgba(0,0,0,0.01)'\n                {...listItemStyleProps}\n                bg={highlightedIndex === index ? highlightItemBg : 'inherit'}\n                key={`${item.value}${index}`}\n                {...getItemProps({ item, index })}\n              >\n                {isCreating ? (\n                  createItemRenderer(item.label)\n                ) : (\n                  <Box display='inline-flex' alignItems='center'>\n                    {selectedItemValues.includes(item.value) && (\n                      <ListIcon\n                        as={icon || CheckCircleIcon}\n                        color='green.500'\n                        role='img'\n                        display='inline'\n                        aria-label='Selected'\n                        {...selectedIconProps}\n                      />\n                    )}\n\n                    {itemRenderer ? (\n                      itemRenderer(item)\n                    ) : (\n                      <Highlighter\n                        autoEscape\n                        searchWords={[inputValue || '']}\n                        textToHighlight={defaultItemRenderer(item)}\n                      />\n                    )}\n                  </Box>\n                )}\n              </ListItem>\n            ))}\n        </List>\n      </Box>\n      {/* ----------- End Section that renders the Menu Lists Component ----------------- */}\n    </Stack>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}